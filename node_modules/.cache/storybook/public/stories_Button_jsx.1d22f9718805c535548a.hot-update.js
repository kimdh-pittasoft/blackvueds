"use strict";
globalThis["webpackHotUpdatestorybook"]("stories_Button_jsx",{

/***/ "./stories/Button.jsx":
/*!****************************!*\
  !*** ./stories/Button.jsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* binding */ Button),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Button_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button.css */ "./stories/Button.css");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");




/**
 * Primary UI component for user interaction
 */

const Button = ({
  variant = "filled",
  color = "primary",
  size = "medium",
  isBox = false,
  label,
  leftIcon,
  rightIcon,
  disabled = false,
  loading = false,
  onClick = () => {},
  ...props
}) => {
  const baseClassName = "btn";
  const variantClassName = `btn-${variant}`;
  const colorClassName = `btn-${color}`;
  const sizeClassName = `btn-${size}`;
  const boxClassName = isBox ? "btn-box" : "";
  const loadingClassName = loading ? "loading" : "";
  const className = [baseClassName, variantClassName, colorClassName, sizeClassName, boxClassName, loadingClassName].filter(Boolean).join(" ");
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
    type: "button",
    className: className,
    disabled: disabled || loading,
    onClick: onClick,
    ...props,
    children: [loading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
      className: "loading-spinner"
    }), !loading && leftIcon && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
      className: "material-icons",
      children: leftIcon
    }), !loading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
      children: label
    }), !loading && rightIcon && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span", {
      className: "material-icons",
      children: rightIcon
    })]
  });
};
Button.displayName = "Button";
Button.propTypes = {
  /**
   * Button variant
   */
  variant: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["filled", "outlined", "text"]),
  /**
   * Button color scheme
   */
  color: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["primary", "secondary", "danger", "violet"]),
  /**
   * Button size
   */
  size: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["small", "medium", "large"]),
  /**
   * Button contents
   */
  label: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string).isRequired,
  /**
   * Left icon (Material Icons)
   */
  leftIcon: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
  /**
   * Right icon (Material Icons)
   */
  rightIcon: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
  /**
   * Disabled state
   */
  disabled: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
  /**
   * Loading state
   */
  loading: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
  /**
   * Optional click handler
   */
  onClick: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func),
  /**
   * Box style with larger border radius
   */
  isBox: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool)
};
Button.defaultProps = {
  variant: "filled",
  color: "primary",
  size: "medium",
  isBox: false,
  disabled: false,
  loading: false,
  onClick: () => {}
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Button);
;
Button.__docgenInfo = {
  "description": "Primary UI component for user interaction",
  "methods": [],
  "displayName": "Button",
  "props": {
    "variant": {
      "defaultValue": {
        "value": "\"filled\"",
        "computed": false
      },
      "description": "Button variant",
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"filled\"",
          "computed": false
        }, {
          "value": "\"outlined\"",
          "computed": false
        }, {
          "value": "\"text\"",
          "computed": false
        }]
      },
      "required": false
    },
    "color": {
      "defaultValue": {
        "value": "\"primary\"",
        "computed": false
      },
      "description": "Button color scheme",
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"primary\"",
          "computed": false
        }, {
          "value": "\"secondary\"",
          "computed": false
        }, {
          "value": "\"danger\"",
          "computed": false
        }, {
          "value": "\"violet\"",
          "computed": false
        }]
      },
      "required": false
    },
    "size": {
      "defaultValue": {
        "value": "\"medium\"",
        "computed": false
      },
      "description": "Button size",
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"small\"",
          "computed": false
        }, {
          "value": "\"medium\"",
          "computed": false
        }, {
          "value": "\"large\"",
          "computed": false
        }]
      },
      "required": false
    },
    "isBox": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "description": "Box style with larger border radius",
      "type": {
        "name": "bool"
      },
      "required": false
    },
    "disabled": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "description": "Disabled state",
      "type": {
        "name": "bool"
      },
      "required": false
    },
    "loading": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "description": "Loading state",
      "type": {
        "name": "bool"
      },
      "required": false
    },
    "onClick": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "description": "Optional click handler",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "label": {
      "description": "Button contents",
      "type": {
        "name": "string"
      },
      "required": true
    },
    "leftIcon": {
      "description": "Left icon (Material Icons)",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "rightIcon": {
      "description": "Right icon (Material Icons)",
      "type": {
        "name": "string"
      },
      "required": false
    }
  }
};

/***/ })

});