"use strict";
self["webpackHotUpdatestorybook"]("Button-stories",{

/***/ "./stories/Button.stories.js":
/*!***********************************!*\
  !*** ./stories/Button.stories.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AllVariants: () => (/* binding */ AllVariants),
/* harmony export */   Colors: () => (/* binding */ Colors),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Sizes: () => (/* binding */ Sizes),
/* harmony export */   States: () => (/* binding */ States),
/* harmony export */   Variants: () => (/* binding */ Variants),
/* harmony export */   WithIcons: () => (/* binding */ WithIcons),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _storybook_test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @storybook/test */ "./node_modules/@storybook/test/dist/index.mjs");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Button */ "./stories/Button.jsx");


// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/Button',
  component: _Button__WEBPACK_IMPORTED_MODULE_1__.Button,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered',
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/bggknJrC6bRFYFiyypPW0t/Design-System?node-id=16790-15193'
    }
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    variant: {
      control: 'select',
      options: ['filled', 'outlined', 'text'],
      description: 'Button style variant'
    },
    color: {
      control: 'select',
      options: ['primary', 'secondary', 'danger'],
      description: 'Button color scheme'
    },
    size: {
      control: 'select',
      options: ['small', 'medium', 'large'],
      description: 'Button size'
    },
    label: {
      control: 'text',
      description: 'Button label'
    },
    leftIcon: {
      control: 'text',
      description: 'Material icon name for left icon'
    },
    rightIcon: {
      control: 'text',
      description: 'Material icon name for right icon'
    },
    disabled: {
      control: 'boolean',
      description: 'Disabled state'
    },
    loading: {
      control: 'boolean',
      description: 'Loading state'
    },
    onClick: {
      action: 'clicked',
      description: '클릭 이벤트 핸들러'
    },
    type: {
      control: 'select',
      options: ['button', 'submit', 'reset'],
      description: '버튼의 HTML type 속성'
    }
  },
  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  args: {
    onClick: (0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fn)()
  }
});
// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
const Default = {
  args: {
    label: 'Button',
    variant: 'filled',
    color: 'primary',
    size: 'medium'
  }
};
const Colors = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    color: "primary",
    label: "Primary"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    color: "secondary",
    label: "Secondary"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    color: "danger",
    label: "Danger"
  }))
};
const Variants = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    variant: "filled",
    label: "Filled"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    variant: "outlined",
    label: "Outlined"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    variant: "text",
    label: "Text"
  }))
};
const Sizes = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    size: "small",
    label: "Small"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    size: "medium",
    label: "Medium"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    size: "large",
    label: "Large"
  }))
};
const WithIcons = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    leftIcon: "add",
    label: "Add Item"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    rightIcon: "arrow_forward",
    label: "Next"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    leftIcon: "download",
    rightIcon: "cloud",
    label: "Download"
  }))
};
const States = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Normal"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    disabled: true,
    label: "Disabled"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    loading: true,
    label: "Loading"
  }))
};
const AllVariants = {
  render: () => /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      gap: '2rem'
    }
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    style: {
      marginBottom: '1rem'
    }
  }, "Filled Buttons"), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Primary",
    color: "primary",
    variant: "filled"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Secondary",
    color: "secondary",
    variant: "filled"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Danger",
    color: "danger",
    variant: "filled"
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    style: {
      marginBottom: '1rem'
    }
  }, "Outlined Buttons"), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Primary",
    color: "primary",
    variant: "outlined"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Secondary",
    color: "secondary",
    variant: "outlined"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Danger",
    color: "danger",
    variant: "outlined"
  }))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", {
    style: {
      marginBottom: '1rem'
    }
  }, "Text Buttons"), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      gap: '1rem',
      flexWrap: 'wrap'
    }
  }, /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Primary",
    color: "primary",
    variant: "text"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Secondary",
    color: "secondary",
    variant: "text"
  }), /*#__PURE__*/React.createElement(_Button__WEBPACK_IMPORTED_MODULE_1__.Button, {
    label: "Danger",
    color: "danger",
    variant: "text"
  }))))
};
;
const __namedExportsOrder = ["Default", "Colors", "Variants", "Sizes", "WithIcons", "States", "AllVariants"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: 'Button',\n    variant: 'filled',\n    color: 'primary',\n    size: 'medium'\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Colors.parameters = {
  ...Colors.parameters,
  docs: {
    ...Colors.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    gap: '1rem',\n    alignItems: 'center'\n  }}>\n      <Button color=\"primary\" label=\"Primary\" />\n      <Button color=\"secondary\" label=\"Secondary\" />\n      <Button color=\"danger\" label=\"Danger\" />\n    </div>\n}",
      ...Colors.parameters?.docs?.source
    }
  }
};
Variants.parameters = {
  ...Variants.parameters,
  docs: {
    ...Variants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    gap: '1rem',\n    alignItems: 'center'\n  }}>\n      <Button variant=\"filled\" label=\"Filled\" />\n      <Button variant=\"outlined\" label=\"Outlined\" />\n      <Button variant=\"text\" label=\"Text\" />\n    </div>\n}",
      ...Variants.parameters?.docs?.source
    }
  }
};
Sizes.parameters = {
  ...Sizes.parameters,
  docs: {
    ...Sizes.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    gap: '1rem',\n    alignItems: 'center'\n  }}>\n      <Button size=\"small\" label=\"Small\" />\n      <Button size=\"medium\" label=\"Medium\" />\n      <Button size=\"large\" label=\"Large\" />\n    </div>\n}",
      ...Sizes.parameters?.docs?.source
    }
  }
};
WithIcons.parameters = {
  ...WithIcons.parameters,
  docs: {
    ...WithIcons.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    gap: '1rem',\n    alignItems: 'center'\n  }}>\n      <Button leftIcon=\"add\" label=\"Add Item\" />\n      <Button rightIcon=\"arrow_forward\" label=\"Next\" />\n      <Button leftIcon=\"download\" rightIcon=\"cloud\" label=\"Download\" />\n    </div>\n}",
      ...WithIcons.parameters?.docs?.source
    }
  }
};
States.parameters = {
  ...States.parameters,
  docs: {
    ...States.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    gap: '1rem',\n    alignItems: 'center'\n  }}>\n      <Button label=\"Normal\" />\n      <Button disabled label=\"Disabled\" />\n      <Button loading label=\"Loading\" />\n    </div>\n}",
      ...States.parameters?.docs?.source
    }
  }
};
AllVariants.parameters = {
  ...AllVariants.parameters,
  docs: {
    ...AllVariants.parameters?.docs,
    source: {
      originalSource: "{\n  render: () => <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '2rem'\n  }}>\n      <div>\n        <h3 style={{\n        marginBottom: '1rem'\n      }}>Filled Buttons</h3>\n        <div style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap'\n      }}>\n          <Button label=\"Primary\" color=\"primary\" variant=\"filled\" />\n          <Button label=\"Secondary\" color=\"secondary\" variant=\"filled\" />\n          <Button label=\"Danger\" color=\"danger\" variant=\"filled\" />\n        </div>\n      </div>\n      <div>\n        <h3 style={{\n        marginBottom: '1rem'\n      }}>Outlined Buttons</h3>\n        <div style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap'\n      }}>\n          <Button label=\"Primary\" color=\"primary\" variant=\"outlined\" />\n          <Button label=\"Secondary\" color=\"secondary\" variant=\"outlined\" />\n          <Button label=\"Danger\" color=\"danger\" variant=\"outlined\" />\n        </div>\n      </div>\n      <div>\n        <h3 style={{\n        marginBottom: '1rem'\n      }}>Text Buttons</h3>\n        <div style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap'\n      }}>\n          <Button label=\"Primary\" color=\"primary\" variant=\"text\" />\n          <Button label=\"Secondary\" color=\"secondary\" variant=\"text\" />\n          <Button label=\"Danger\" color=\"danger\" variant=\"text\" />\n        </div>\n      </div>\n    </div>\n}",
      ...AllVariants.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=Button-stories.81f2913f6b8cfab464c3.hot-update.js.map